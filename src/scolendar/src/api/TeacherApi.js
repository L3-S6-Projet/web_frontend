/*
 * Scolendar
 * UE Projet - L3 Informatique AMU 2019-2020 All of the routes missing the `role-professor` or `role-student` tags are meant for administrators only - as stated in their descriptions.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AccountCreatedResponse', 'model/ErrorResponse', 'model/IDRequest', 'model/Occupancies', 'model/SimpleSuccessResponse', 'model/TeacherCreationRequest', 'model/TeacherListResponse', 'model/TeacherResponse', 'model/TeacherSubjects', 'model/TeacherUpdateRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AccountCreatedResponse'), require('../model/ErrorResponse'), require('../model/IDRequest'), require('../model/Occupancies'), require('../model/SimpleSuccessResponse'), require('../model/TeacherCreationRequest'), require('../model/TeacherListResponse'), require('../model/TeacherResponse'), require('../model/TeacherSubjects'), require('../model/TeacherUpdateRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.Scolendar) {
      root.Scolendar = {};
    }
    root.Scolendar.TeacherApi = factory(root.Scolendar.ApiClient, root.Scolendar.AccountCreatedResponse, root.Scolendar.ErrorResponse, root.Scolendar.IDRequest, root.Scolendar.Occupancies, root.Scolendar.SimpleSuccessResponse, root.Scolendar.TeacherCreationRequest, root.Scolendar.TeacherListResponse, root.Scolendar.TeacherResponse, root.Scolendar.TeacherSubjects, root.Scolendar.TeacherUpdateRequest);
  }
}(this, function(ApiClient, AccountCreatedResponse, ErrorResponse, IDRequest, Occupancies, SimpleSuccessResponse, TeacherCreationRequest, TeacherListResponse, TeacherResponse, TeacherSubjects, TeacherUpdateRequest) {
  'use strict';

  /**
   * Teacher service.
   * @module api/TeacherApi
   * @version v1
   */

  /**
   * Constructs a new TeacherApi. 
   * @alias module:api/TeacherApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the teachersDelete operation.
     * @callback module:api/TeacherApi~teachersDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the given teachers using their IDs.
     * Note : only users with the role `administrator` should be able to access this route. This request should be denied if the professors are in charge of any subjects. This should cascade and delete any occupancies they are a part of, and remove them from any subjects they took part in.
     * @param {module:model/IDRequest} iDRequest 
     * @param {module:api/TeacherApi~teachersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleSuccessResponse}
     */
    this.teachersDelete = function(iDRequest, callback) {
      var postBody = iDRequest;

      // verify the required parameter 'iDRequest' is set
      if (iDRequest === undefined || iDRequest === null) {
        throw new Error("Missing the required parameter 'iDRequest' when calling teachersDelete");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = SimpleSuccessResponse;

      return this.apiClient.callApi(
        '/teachers', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teachersGet operation.
     * @callback module:api/TeacherApi~teachersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeacherListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a paginated list of all teachers.
     * Note : only users with the role `administrator` should be able to access this route. 10 teachers should be returned per page. If less than three characters are provided for the query, it will not be applied. Warning: the `email` and `phone_number` can be null.
     * @param {Object} opts Optional parameters
     * @param {String} opts.query 
     * @param {Number} opts.page 
     * @param {module:api/TeacherApi~teachersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeacherListResponse}
     */
    this.teachersGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'query': opts['query'],
        'page': opts['page'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = TeacherListResponse;

      return this.apiClient.callApi(
        '/teachers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teachersIdGet operation.
     * @callback module:api/TeacherApi~teachersIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeacherResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information for a teacher
     * Note : only users with the role `administrator` should be able to access this route. Warning: the `email` and `phone_number` can be null.
     * @param {Number} id Teacher ID
     * @param {module:api/TeacherApi~teachersIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeacherResponse}
     */
    this.teachersIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling teachersIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = TeacherResponse;

      return this.apiClient.callApi(
        '/teachers/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teachersIdOccupanciesGet operation.
     * @callback module:api/TeacherApi~teachersIdOccupanciesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Occupancies} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the occupancies of a teacher for the given time period.
     * Note : only users with the role `administrator`, or teachers whose id match the one in the URL should be able to access this route.
     * @param {Number} id Teacher ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start Start timestamp of the occupancies
     * @param {Number} opts.end End timestamp of the occupancies
     * @param {Number} opts.occupanciesPerDay Pass 0 to return ALL the events.
     * @param {module:api/TeacherApi~teachersIdOccupanciesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Occupancies}
     */
    this.teachersIdOccupanciesGet = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling teachersIdOccupanciesGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'start': opts['start'],
        'end': opts['end'],
        'occupancies_per_day': opts['occupanciesPerDay'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Occupancies;

      return this.apiClient.callApi(
        '/teachers/{id}/occupancies', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teachersIdPut operation.
     * @callback module:api/TeacherApi~teachersIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates information for a teacher.
     * Note : only users with the role `administrator` should be able to access this route. Only filled fields should be updated. To remove the `phone_number` or `email` fields, pass `null`.
     * @param {Number} id Teacher ID
     * @param {module:model/TeacherUpdateRequest} teacherUpdateRequest 
     * @param {module:api/TeacherApi~teachersIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleSuccessResponse}
     */
    this.teachersIdPut = function(id, teacherUpdateRequest, callback) {
      var postBody = teacherUpdateRequest;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling teachersIdPut");
      }

      // verify the required parameter 'teacherUpdateRequest' is set
      if (teacherUpdateRequest === undefined || teacherUpdateRequest === null) {
        throw new Error("Missing the required parameter 'teacherUpdateRequest' when calling teachersIdPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = SimpleSuccessResponse;

      return this.apiClient.callApi(
        '/teachers/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teachersIdSubjectsGet operation.
     * @callback module:api/TeacherApi~teachersIdSubjectsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeacherSubjects} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of all subjects that a teacher participates in.
     * Note : only teachers whose id match the one in the URL should be able to access this route.
     * @param {Number} id Teacher ID
     * @param {module:api/TeacherApi~teachersIdSubjectsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeacherSubjects}
     */
    this.teachersIdSubjectsGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling teachersIdSubjectsGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = TeacherSubjects;

      return this.apiClient.callApi(
        '/teachers/{id}/subjects', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teachersPost operation.
     * @callback module:api/TeacherApi~teachersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountCreatedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new teacher.
     * Note : only users with the role `administrator` should be able to access this route. `email` and `phone_number` can be null in the request.
     * @param {module:model/TeacherCreationRequest} teacherCreationRequest 
     * @param {module:api/TeacherApi~teachersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountCreatedResponse}
     */
    this.teachersPost = function(teacherCreationRequest, callback) {
      var postBody = teacherCreationRequest;

      // verify the required parameter 'teacherCreationRequest' is set
      if (teacherCreationRequest === undefined || teacherCreationRequest === null) {
        throw new Error("Missing the required parameter 'teacherCreationRequest' when calling teachersPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = AccountCreatedResponse;

      return this.apiClient.callApi(
        '/teachers', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
