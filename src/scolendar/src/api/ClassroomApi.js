/*
 * Scolendar
 * UE Projet - L3 Informatique AMU 2019-2020 All of the routes missing the `role-professor` or `role-student` tags are meant for administrators only - as stated in their descriptions.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ClassroomCreationRequest', 'model/ClassroomGetResponse', 'model/ClassroomUpdateRequest', 'model/ClassroomsList', 'model/ErrorResponse', 'model/IDRequest', 'model/Occupancies', 'model/SimpleSuccessResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ClassroomCreationRequest'), require('../model/ClassroomGetResponse'), require('../model/ClassroomUpdateRequest'), require('../model/ClassroomsList'), require('../model/ErrorResponse'), require('../model/IDRequest'), require('../model/Occupancies'), require('../model/SimpleSuccessResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.Scolendar) {
      root.Scolendar = {};
    }
    root.Scolendar.ClassroomApi = factory(root.Scolendar.ApiClient, root.Scolendar.ClassroomCreationRequest, root.Scolendar.ClassroomGetResponse, root.Scolendar.ClassroomUpdateRequest, root.Scolendar.ClassroomsList, root.Scolendar.ErrorResponse, root.Scolendar.IDRequest, root.Scolendar.Occupancies, root.Scolendar.SimpleSuccessResponse);
  }
}(this, function(ApiClient, ClassroomCreationRequest, ClassroomGetResponse, ClassroomUpdateRequest, ClassroomsList, ErrorResponse, IDRequest, Occupancies, SimpleSuccessResponse) {
  'use strict';

  /**
   * Classroom service.
   * @module api/ClassroomApi
   * @version v1
   */

  /**
   * Constructs a new ClassroomApi. 
   * @alias module:api/ClassroomApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the classroomsDelete operation.
     * @callback module:api/ClassroomApi~classroomsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the given classrooms using their IDs.
     * Note : only users with the role `administrator` should be able to access this route. This request should be denied if the classroom is used in any occupancy.
     * @param {module:model/IDRequest} iDRequest 
     * @param {module:api/ClassroomApi~classroomsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleSuccessResponse}
     */
    this.classroomsDelete = function(iDRequest, callback) {
      var postBody = iDRequest;

      // verify the required parameter 'iDRequest' is set
      if (iDRequest === undefined || iDRequest === null) {
        throw new Error("Missing the required parameter 'iDRequest' when calling classroomsDelete");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = SimpleSuccessResponse;

      return this.apiClient.callApi(
        '/classrooms', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the classroomsGet operation.
     * @callback module:api/ClassroomApi~classroomsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClassroomsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a paginated list of all classrooms.
     * Note : only users with the role `administrator`, or professors, should be able to access this route. 10 classrooms should be returned per page. If less than three characters are provided for the query, it will not be applied.
     * @param {Object} opts Optional parameters
     * @param {String} opts.query 
     * @param {Number} opts.page 
     * @param {module:api/ClassroomApi~classroomsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClassroomsList}
     */
    this.classroomsGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'query': opts['query'],
        'page': opts['page'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = ClassroomsList;

      return this.apiClient.callApi(
        '/classrooms', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the classroomsIdGet operation.
     * @callback module:api/ClassroomApi~classroomsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClassroomGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information for a classroom.
     * Note : only users with the role `administrator` should be able to access this route.
     * @param {Number} id Classroom ID
     * @param {module:api/ClassroomApi~classroomsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClassroomGetResponse}
     */
    this.classroomsIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling classroomsIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = ClassroomGetResponse;

      return this.apiClient.callApi(
        '/classrooms/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the classroomsIdOccupanciesGet operation.
     * @callback module:api/ClassroomApi~classroomsIdOccupanciesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Occupancies} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the occupancies of a classroom for the given time period.
     * Note : only users with the role `administrator` should be able to access this route.
     * @param {Number} id Classroom ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start Start timestamp of the occupancies
     * @param {Number} opts.end End timestamp of the occupancies
     * @param {Number} opts.occupanciesPerDay Pass 0 to return ALL the events.
     * @param {module:api/ClassroomApi~classroomsIdOccupanciesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Occupancies}
     */
    this.classroomsIdOccupanciesGet = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling classroomsIdOccupanciesGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'start': opts['start'],
        'end': opts['end'],
        'occupancies_per_day': opts['occupanciesPerDay'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Occupancies;

      return this.apiClient.callApi(
        '/classrooms/{id}/occupancies', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the classroomsIdPut operation.
     * @callback module:api/ClassroomApi~classroomsIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates information for a classroom.
     * Note : only users with the role `administrator` should be able to access this route. The omission of the `capacity` field is not an error : it should not be able to be modified.
     * @param {Number} id Classroom ID
     * @param {module:model/ClassroomUpdateRequest} classroomUpdateRequest 
     * @param {module:api/ClassroomApi~classroomsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleSuccessResponse}
     */
    this.classroomsIdPut = function(id, classroomUpdateRequest, callback) {
      var postBody = classroomUpdateRequest;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling classroomsIdPut");
      }

      // verify the required parameter 'classroomUpdateRequest' is set
      if (classroomUpdateRequest === undefined || classroomUpdateRequest === null) {
        throw new Error("Missing the required parameter 'classroomUpdateRequest' when calling classroomsIdPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = SimpleSuccessResponse;

      return this.apiClient.callApi(
        '/classrooms/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the classroomsPost operation.
     * @callback module:api/ClassroomApi~classroomsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new classroom.
     * Note : only users with the role `administrator` should be able to access this route.
     * @param {module:model/ClassroomCreationRequest} classroomCreationRequest 
     * @param {module:api/ClassroomApi~classroomsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleSuccessResponse}
     */
    this.classroomsPost = function(classroomCreationRequest, callback) {
      var postBody = classroomCreationRequest;

      // verify the required parameter 'classroomCreationRequest' is set
      if (classroomCreationRequest === undefined || classroomCreationRequest === null) {
        throw new Error("Missing the required parameter 'classroomCreationRequest' when calling classroomsPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = SimpleSuccessResponse;

      return this.apiClient.callApi(
        '/classrooms', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
