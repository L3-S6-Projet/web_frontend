/*
 * Scolendar
 * UE Projet - L3 Informatique AMU 2019-2020 All of the routes missing the `role-professor` or `role-student` tags are meant for administrators only - as stated in their descriptions.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ClassResponse', 'model/ClassUpdateRequest', 'model/ClassesList', 'model/ErrorResponse', 'model/IDRequest', 'model/ModelClass', 'model/Occupancies', 'model/SimpleSuccessResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ClassResponse'), require('../model/ClassUpdateRequest'), require('../model/ClassesList'), require('../model/ErrorResponse'), require('../model/IDRequest'), require('../model/ModelClass'), require('../model/Occupancies'), require('../model/SimpleSuccessResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.Scolendar) {
      root.Scolendar = {};
    }
    root.Scolendar.ClassesApi = factory(root.Scolendar.ApiClient, root.Scolendar.ClassResponse, root.Scolendar.ClassUpdateRequest, root.Scolendar.ClassesList, root.Scolendar.ErrorResponse, root.Scolendar.IDRequest, root.Scolendar.ModelClass, root.Scolendar.Occupancies, root.Scolendar.SimpleSuccessResponse);
  }
}(this, function(ApiClient, ClassResponse, ClassUpdateRequest, ClassesList, ErrorResponse, IDRequest, ModelClass, Occupancies, SimpleSuccessResponse) {
  'use strict';

  /**
   * Classes service.
   * @module api/ClassesApi
   * @version v1
   */

  /**
   * Constructs a new ClassesApi. 
   * @alias module:api/ClassesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the classesDelete operation.
     * @callback module:api/ClassesApi~classesDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the given classes using their IDs.
     * Note : only users with the role `administrator` should be able to access this route. This request should be denied if the class is used in any subject, or if any student is in this class.
     * @param {module:model/IDRequest} iDRequest 
     * @param {module:api/ClassesApi~classesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleSuccessResponse}
     */
    this.classesDelete = function(iDRequest, callback) {
      var postBody = iDRequest;

      // verify the required parameter 'iDRequest' is set
      if (iDRequest === undefined || iDRequest === null) {
        throw new Error("Missing the required parameter 'iDRequest' when calling classesDelete");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = SimpleSuccessResponse;

      return this.apiClient.callApi(
        '/classes', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the classesGet operation.
     * @callback module:api/ClassesApi~classesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClassesList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a paginated list of all classes.
     * Note : only users with the role `administrator` should be able to access this route. 10 classes should be returned per page. At least three characters should be provided for the search, or the results won't be filtered.
     * @param {Object} opts Optional parameters
     * @param {String} opts.query 
     * @param {Number} opts.page 
     * @param {module:api/ClassesApi~classesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClassesList}
     */
    this.classesGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'query': opts['query'],
        'page': opts['page'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = ClassesList;

      return this.apiClient.callApi(
        '/classes', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the classesIdGet operation.
     * @callback module:api/ClassesApi~classesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClassResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information for a class.
     * Note : only users with the role `administrator` should be able to access this route.
     * @param {Number} id Class ID
     * @param {module:api/ClassesApi~classesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClassResponse}
     */
    this.classesIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling classesIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = ClassResponse;

      return this.apiClient.callApi(
        '/classes/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the classesIdOccupanciesGet operation.
     * @callback module:api/ClassesApi~classesIdOccupanciesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Occupancies} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the occupancies of a class for the given time period.
     * Note : only users with the role `administrator` should be able to access this route.
     * @param {Number} id Class ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start Start timestamp of the occupancies
     * @param {Number} opts.end End timestamp of the occupancies
     * @param {Number} opts.occupanciesPerDay Pass 0 to return ALL the events.
     * @param {module:api/ClassesApi~classesIdOccupanciesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Occupancies}
     */
    this.classesIdOccupanciesGet = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling classesIdOccupanciesGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'start': opts['start'],
        'end': opts['end'],
        'occupancies_per_day': opts['occupanciesPerDay'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Occupancies;

      return this.apiClient.callApi(
        '/classes/{id}/occupancies', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the classesIdPut operation.
     * @callback module:api/ClassesApi~classesIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates information for a class.
     * Note : only users with the role `administrator` should be able to access this route.
     * @param {Number} id Class ID
     * @param {module:model/ClassUpdateRequest} classUpdateRequest 
     * @param {module:api/ClassesApi~classesIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleSuccessResponse}
     */
    this.classesIdPut = function(id, classUpdateRequest, callback) {
      var postBody = classUpdateRequest;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling classesIdPut");
      }

      // verify the required parameter 'classUpdateRequest' is set
      if (classUpdateRequest === undefined || classUpdateRequest === null) {
        throw new Error("Missing the required parameter 'classUpdateRequest' when calling classesIdPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = SimpleSuccessResponse;

      return this.apiClient.callApi(
        '/classes/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the classesPost operation.
     * @callback module:api/ClassesApi~classesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new class.
     * Note : only users with the role `administrator` should be able to access this route.
     * @param {module:model/ModelClass} classCreationRequest 
     * @param {module:api/ClassesApi~classesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleSuccessResponse}
     */
    this.classesPost = function(classCreationRequest, callback) {
      var postBody = classCreationRequest;

      // verify the required parameter 'classCreationRequest' is set
      if (classCreationRequest === undefined || classCreationRequest === null) {
        throw new Error("Missing the required parameter 'classCreationRequest' when calling classesPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = SimpleSuccessResponse;

      return this.apiClient.callApi(
        '/classes', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
