/*
 * Scolendar
 * UE Projet - L3 Informatique AMU 2019-2020 All of the routes missing the `role-professor` or `role-student` tags are meant for administrators only - as stated in their descriptions.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ClassroomsList', 'model/ErrorResponse', 'model/ICALFeed', 'model/LoginRequest', 'model/Occupancies', 'model/OccupanciesCreationRequest', 'model/OccupanciesUpdateRequest', 'model/ProfileRecentModifications', 'model/ProfileUpdateRequest', 'model/SimpleSuccessResponse', 'model/SuccessfulLoginResponse', 'model/TeacherSubjects'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ClassroomsList'), require('../model/ErrorResponse'), require('../model/ICALFeed'), require('../model/LoginRequest'), require('../model/Occupancies'), require('../model/OccupanciesCreationRequest'), require('../model/OccupanciesUpdateRequest'), require('../model/ProfileRecentModifications'), require('../model/ProfileUpdateRequest'), require('../model/SimpleSuccessResponse'), require('../model/SuccessfulLoginResponse'), require('../model/TeacherSubjects'));
  } else {
    // Browser globals (root is window)
    if (!root.Scolendar) {
      root.Scolendar = {};
    }
    root.Scolendar.RoleProfessorApi = factory(root.Scolendar.ApiClient, root.Scolendar.ClassroomsList, root.Scolendar.ErrorResponse, root.Scolendar.ICALFeed, root.Scolendar.LoginRequest, root.Scolendar.Occupancies, root.Scolendar.OccupanciesCreationRequest, root.Scolendar.OccupanciesUpdateRequest, root.Scolendar.ProfileRecentModifications, root.Scolendar.ProfileUpdateRequest, root.Scolendar.SimpleSuccessResponse, root.Scolendar.SuccessfulLoginResponse, root.Scolendar.TeacherSubjects);
  }
}(this, function(ApiClient, ClassroomsList, ErrorResponse, ICALFeed, LoginRequest, Occupancies, OccupanciesCreationRequest, OccupanciesUpdateRequest, ProfileRecentModifications, ProfileUpdateRequest, SimpleSuccessResponse, SuccessfulLoginResponse, TeacherSubjects) {
  'use strict';

  /**
   * RoleProfessor service.
   * @module api/RoleProfessorApi
   * @version v1
   */

  /**
   * Constructs a new RoleProfessorApi. 
   * @alias module:api/RoleProfessorApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the classroomsGet operation.
     * @callback module:api/RoleProfessorApi~classroomsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClassroomsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a paginated list of all classrooms.
     * Note : only users with the role `administrator`, or professors, should be able to access this route. 10 classrooms should be returned per page. If less than three characters are provided for the query, it will not be applied.
     * @param {Object} opts Optional parameters
     * @param {String} opts.query 
     * @param {Number} opts.page 
     * @param {module:api/RoleProfessorApi~classroomsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClassroomsList}
     */
    this.classroomsGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'query': opts['query'],
        'page': opts['page'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = ClassroomsList;

      return this.apiClient.callApi(
        '/classrooms', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the login operation.
     * @callback module:api/RoleProfessorApi~loginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessfulLoginResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Logins the user to the application, returning a new auth token and the user role.
     * @param {module:model/LoginRequest} loginRequest 
     * @param {module:api/RoleProfessorApi~loginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessfulLoginResponse}
     */
    this.login = function(loginRequest, callback) {
      var postBody = loginRequest;

      // verify the required parameter 'loginRequest' is set
      if (loginRequest === undefined || loginRequest === null) {
        throw new Error("Missing the required parameter 'loginRequest' when calling login");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SuccessfulLoginResponse;

      return this.apiClient.callApi(
        '/session', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logout operation.
     * @callback module:api/RoleProfessorApi~logoutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Destroys the given auth token.
     * @param {module:api/RoleProfessorApi~logoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleSuccessResponse}
     */
    this.logout = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SimpleSuccessResponse;

      return this.apiClient.callApi(
        '/session', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the occupanciesIdDelete operation.
     * @callback module:api/RoleProfessorApi~occupanciesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes occupancies from a subject using their IDs.
     * Note : only administrators and professors who are a teacher of the subject should be able to access this route.
     * @param {Number} id Occupancy ID
     * @param {module:api/RoleProfessorApi~occupanciesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleSuccessResponse}
     */
    this.occupanciesIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling occupanciesIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = SimpleSuccessResponse;

      return this.apiClient.callApi(
        '/occupancies/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the occupanciesIdPut operation.
     * @callback module:api/RoleProfessorApi~occupanciesIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an occupancy for a given subject.
     * Note : only administrators and professors who are a teacher of the subject should be able to access this route. Only classrooms that are free should be accepted. Only classes that are not (any of their groups too) in any classes at the specified time should be accepted. Only filled fields should be updated.You can't change the assigned group, or the assigned type, or the assigned subject, or the assigned teacher.
     * @param {Number} id Occupancy ID
     * @param {module:model/OccupanciesUpdateRequest} occupanciesUpdateRequest 
     * @param {module:api/RoleProfessorApi~occupanciesIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleSuccessResponse}
     */
    this.occupanciesIdPut = function(id, occupanciesUpdateRequest, callback) {
      var postBody = occupanciesUpdateRequest;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling occupanciesIdPut");
      }

      // verify the required parameter 'occupanciesUpdateRequest' is set
      if (occupanciesUpdateRequest === undefined || occupanciesUpdateRequest === null) {
        throw new Error("Missing the required parameter 'occupanciesUpdateRequest' when calling occupanciesIdPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = SimpleSuccessResponse;

      return this.apiClient.callApi(
        '/occupancies/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the profileFeedsIcalGet operation.
     * @callback module:api/RoleProfessorApi~profileFeedsIcalGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ICALFeed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the url to the ICAL feed of the user calendar.
     * @param {module:api/RoleProfessorApi~profileFeedsIcalGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ICALFeed}
     */
    this.profileFeedsIcalGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = ICALFeed;

      return this.apiClient.callApi(
        '/profile/feeds/ical', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the profileLastOccupanciesModificationsGet operation.
     * @callback module:api/RoleProfessorApi~profileLastOccupanciesModificationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfileRecentModifications} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all recent occupancies modifications that are relevant to the user.
     * Modifications that are relevant are: - For a teacher: modifications of occupancies about a subject that they teach, or modifications of their own external occupancies. - For a student : modifications of occupancies about a subject that they take. Only the last 25 modifications should be returned.
     * @param {module:api/RoleProfessorApi~profileLastOccupanciesModificationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfileRecentModifications}
     */
    this.profileLastOccupanciesModificationsGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = ProfileRecentModifications;

      return this.apiClient.callApi(
        '/profile/last-occupancies-modifications', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the profilePut operation.
     * @callback module:api/RoleProfessorApi~profilePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the user model.
     * Should be accessible by every user.
     * @param {module:model/ProfileUpdateRequest} profileUpdateRequest 
     * @param {module:api/RoleProfessorApi~profilePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleSuccessResponse}
     */
    this.profilePut = function(profileUpdateRequest, callback) {
      var postBody = profileUpdateRequest;

      // verify the required parameter 'profileUpdateRequest' is set
      if (profileUpdateRequest === undefined || profileUpdateRequest === null) {
        throw new Error("Missing the required parameter 'profileUpdateRequest' when calling profilePut");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = SimpleSuccessResponse;

      return this.apiClient.callApi(
        '/profile', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the subjectsIdGroupsGroupNumberOccupanciesGet operation.
     * @callback module:api/RoleProfessorApi~subjectsIdGroupsGroupNumberOccupanciesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Occupancies} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the occupancies of a subject for the given time period.
     * Note : only professors who are a teacher of the subject should be able to access this route.
     * @param {Number} id Subject ID
     * @param {Number} groupNumber Group number
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start Start timestamp of the occupancies
     * @param {Number} opts.end End timestamp of the occupancies
     * @param {Number} opts.occupanciesPerDay Pass 0 to return ALL the events.
     * @param {module:api/RoleProfessorApi~subjectsIdGroupsGroupNumberOccupanciesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Occupancies}
     */
    this.subjectsIdGroupsGroupNumberOccupanciesGet = function(id, groupNumber, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subjectsIdGroupsGroupNumberOccupanciesGet");
      }

      // verify the required parameter 'groupNumber' is set
      if (groupNumber === undefined || groupNumber === null) {
        throw new Error("Missing the required parameter 'groupNumber' when calling subjectsIdGroupsGroupNumberOccupanciesGet");
      }


      var pathParams = {
        'id': id,
        'group_number': groupNumber
      };
      var queryParams = {
        'start': opts['start'],
        'end': opts['end'],
        'occupancies_per_day': opts['occupanciesPerDay'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Occupancies;

      return this.apiClient.callApi(
        '/subjects/{id}/groups/{group_number}/occupancies', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the subjectsIdGroupsGroupNumberOccupanciesPost operation.
     * @callback module:api/RoleProfessorApi~subjectsIdGroupsGroupNumberOccupanciesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new occupancy for a given group of a subject.
     * Note : only professors who are a teacher of the subject should be able to access this route. The only accepted occupancy types should be `td` and `tp`. The classroom id should **NOT** be nullable. Only classrooms that are free should be accepted. Only groups that are not (and their class too) in any classes at the specified time should be accepted.
     * @param {Number} id Subject ID
     * @param {Number} groupNumber Group Number
     * @param {module:model/OccupanciesCreationRequest} occupanciesCreationRequest 
     * @param {module:api/RoleProfessorApi~subjectsIdGroupsGroupNumberOccupanciesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleSuccessResponse}
     */
    this.subjectsIdGroupsGroupNumberOccupanciesPost = function(id, groupNumber, occupanciesCreationRequest, callback) {
      var postBody = occupanciesCreationRequest;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subjectsIdGroupsGroupNumberOccupanciesPost");
      }

      // verify the required parameter 'groupNumber' is set
      if (groupNumber === undefined || groupNumber === null) {
        throw new Error("Missing the required parameter 'groupNumber' when calling subjectsIdGroupsGroupNumberOccupanciesPost");
      }

      // verify the required parameter 'occupanciesCreationRequest' is set
      if (occupanciesCreationRequest === undefined || occupanciesCreationRequest === null) {
        throw new Error("Missing the required parameter 'occupanciesCreationRequest' when calling subjectsIdGroupsGroupNumberOccupanciesPost");
      }


      var pathParams = {
        'id': id,
        'group_number': groupNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = SimpleSuccessResponse;

      return this.apiClient.callApi(
        '/subjects/{id}/groups/{group_number}/occupancies', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the subjectsIdOccupanciesGet operation.
     * @callback module:api/RoleProfessorApi~subjectsIdOccupanciesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Occupancies} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the occupancies of a subject for the given time period.
     * Note : only users with the role `administrator`, or professors who are a teacher of the subject should be able to access this route.
     * @param {Number} id Subject ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start Start timestamp of the occupancies
     * @param {Number} opts.end End timestamp of the occupancies
     * @param {Number} opts.occupanciesPerDay Pass 0 to return ALL the events.
     * @param {module:api/RoleProfessorApi~subjectsIdOccupanciesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Occupancies}
     */
    this.subjectsIdOccupanciesGet = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subjectsIdOccupanciesGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'start': opts['start'],
        'end': opts['end'],
        'occupancies_per_day': opts['occupanciesPerDay'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Occupancies;

      return this.apiClient.callApi(
        '/subjects/{id}/occupancies', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the subjectsIdOccupanciesPost operation.
     * @callback module:api/RoleProfessorApi~subjectsIdOccupanciesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new occupancy for a given subject.
     * Note : only professors who are a teacher of the subject should be able to access this route. The occupancy types `td` and `tp` should be rejected. Only classrooms that are free should be accepted. Only classes that are not (any of their groups too) in any classes at the specified time should be accepted.
     * @param {Number} id Subject ID
     * @param {module:model/OccupanciesCreationRequest} occupanciesCreationRequest 
     * @param {module:api/RoleProfessorApi~subjectsIdOccupanciesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleSuccessResponse}
     */
    this.subjectsIdOccupanciesPost = function(id, occupanciesCreationRequest, callback) {
      var postBody = occupanciesCreationRequest;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subjectsIdOccupanciesPost");
      }

      // verify the required parameter 'occupanciesCreationRequest' is set
      if (occupanciesCreationRequest === undefined || occupanciesCreationRequest === null) {
        throw new Error("Missing the required parameter 'occupanciesCreationRequest' when calling subjectsIdOccupanciesPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = SimpleSuccessResponse;

      return this.apiClient.callApi(
        '/subjects/{id}/occupancies', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teachersIdOccupanciesGet operation.
     * @callback module:api/RoleProfessorApi~teachersIdOccupanciesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Occupancies} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the occupancies of a teacher for the given time period.
     * Note : only users with the role `administrator`, or teachers whose id match the one in the URL should be able to access this route.
     * @param {Number} id Teacher ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start Start timestamp of the occupancies
     * @param {Number} opts.end End timestamp of the occupancies
     * @param {Number} opts.occupanciesPerDay Pass 0 to return ALL the events.
     * @param {module:api/RoleProfessorApi~teachersIdOccupanciesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Occupancies}
     */
    this.teachersIdOccupanciesGet = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling teachersIdOccupanciesGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'start': opts['start'],
        'end': opts['end'],
        'occupancies_per_day': opts['occupanciesPerDay'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Occupancies;

      return this.apiClient.callApi(
        '/teachers/{id}/occupancies', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teachersIdSubjectsGet operation.
     * @callback module:api/RoleProfessorApi~teachersIdSubjectsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeacherSubjects} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of all subjects that a teacher participates in.
     * Note : only teachers whose id match the one in the URL should be able to access this route.
     * @param {Number} id Teacher ID
     * @param {module:api/RoleProfessorApi~teachersIdSubjectsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeacherSubjects}
     */
    this.teachersIdSubjectsGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling teachersIdSubjectsGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = TeacherSubjects;

      return this.apiClient.callApi(
        '/teachers/{id}/subjects', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
