/*
 * Scolendar
 * UE Projet - L3 Informatique AMU 2019-2020 All of the routes missing the `role-professor` or `role-student` tags are meant for administrators only - as stated in their descriptions.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorResponse', 'model/Occupancies', 'model/OccupanciesUpdateRequest', 'model/SimpleSuccessResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorResponse'), require('../model/Occupancies'), require('../model/OccupanciesUpdateRequest'), require('../model/SimpleSuccessResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.Scolendar) {
      root.Scolendar = {};
    }
    root.Scolendar.OccupanciesApi = factory(root.Scolendar.ApiClient, root.Scolendar.ErrorResponse, root.Scolendar.Occupancies, root.Scolendar.OccupanciesUpdateRequest, root.Scolendar.SimpleSuccessResponse);
  }
}(this, function(ApiClient, ErrorResponse, Occupancies, OccupanciesUpdateRequest, SimpleSuccessResponse) {
  'use strict';

  /**
   * Occupancies service.
   * @module api/OccupanciesApi
   * @version v1
   */

  /**
   * Constructs a new OccupanciesApi. 
   * @alias module:api/OccupanciesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the occupanciesGet operation.
     * @callback module:api/OccupanciesApi~occupanciesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Occupancies} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the occupancies for the given time period.
     * Note : only users with the role `administrator` should be able to access this route.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start Start timestamp of the occupancies
     * @param {Number} opts.end End timestamp of the occupancies
     * @param {Number} opts.occupanciesPerDay Pass 0 to return ALL the events.
     * @param {module:api/OccupanciesApi~occupanciesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Occupancies}
     */
    this.occupanciesGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'start': opts['start'],
        'end': opts['end'],
        'occupancies_per_day': opts['occupanciesPerDay'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Occupancies;

      return this.apiClient.callApi(
        '/occupancies', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the occupanciesIdDelete operation.
     * @callback module:api/OccupanciesApi~occupanciesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes occupancies from a subject using their IDs.
     * Note : only administrators and professors who are a teacher of the subject should be able to access this route.
     * @param {Number} id Occupancy ID
     * @param {module:api/OccupanciesApi~occupanciesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleSuccessResponse}
     */
    this.occupanciesIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling occupanciesIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = SimpleSuccessResponse;

      return this.apiClient.callApi(
        '/occupancies/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the occupanciesIdPut operation.
     * @callback module:api/OccupanciesApi~occupanciesIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an occupancy for a given subject.
     * Note : only administrators and professors who are a teacher of the subject should be able to access this route. Only classrooms that are free should be accepted. Only classes that are not (any of their groups too) in any classes at the specified time should be accepted. Only filled fields should be updated.You can't change the assigned group, or the assigned type, or the assigned subject, or the assigned teacher.
     * @param {Number} id Occupancy ID
     * @param {module:model/OccupanciesUpdateRequest} occupanciesUpdateRequest 
     * @param {module:api/OccupanciesApi~occupanciesIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleSuccessResponse}
     */
    this.occupanciesIdPut = function(id, occupanciesUpdateRequest, callback) {
      var postBody = occupanciesUpdateRequest;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling occupanciesIdPut");
      }

      // verify the required parameter 'occupanciesUpdateRequest' is set
      if (occupanciesUpdateRequest === undefined || occupanciesUpdateRequest === null) {
        throw new Error("Missing the required parameter 'occupanciesUpdateRequest' when calling occupanciesIdPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = SimpleSuccessResponse;

      return this.apiClient.callApi(
        '/occupancies/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
