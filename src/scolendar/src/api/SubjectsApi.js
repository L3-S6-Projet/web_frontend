/*
 * Scolendar
 * UE Projet - L3 Informatique AMU 2019-2020 All of the routes missing the `role-professor` or `role-student` tags are meant for administrators only - as stated in their descriptions.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorResponse', 'model/IDRequest', 'model/Occupancies', 'model/SimpleSuccessResponse', 'model/Subject', 'model/SubjectListResponse', 'model/SubjectResponse', 'model/SubjectUpdateRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorResponse'), require('../model/IDRequest'), require('../model/Occupancies'), require('../model/SimpleSuccessResponse'), require('../model/Subject'), require('../model/SubjectListResponse'), require('../model/SubjectResponse'), require('../model/SubjectUpdateRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.Scolendar) {
      root.Scolendar = {};
    }
    root.Scolendar.SubjectsApi = factory(root.Scolendar.ApiClient, root.Scolendar.ErrorResponse, root.Scolendar.IDRequest, root.Scolendar.Occupancies, root.Scolendar.SimpleSuccessResponse, root.Scolendar.Subject, root.Scolendar.SubjectListResponse, root.Scolendar.SubjectResponse, root.Scolendar.SubjectUpdateRequest);
  }
}(this, function(ApiClient, ErrorResponse, IDRequest, Occupancies, SimpleSuccessResponse, Subject, SubjectListResponse, SubjectResponse, SubjectUpdateRequest) {
  'use strict';

  /**
   * Subjects service.
   * @module api/SubjectsApi
   * @version v1
   */

  /**
   * Constructs a new SubjectsApi. 
   * @alias module:api/SubjectsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the subjectsDelete operation.
     * @callback module:api/SubjectsApi~subjectsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the given subjects using their IDs.
     * Note : only users with the role `administrator` should be able to access this route. This request should be denied if the subject is used in any occupancy (be it directly, or via a group).
     * @param {module:model/IDRequest} iDRequest 
     * @param {module:api/SubjectsApi~subjectsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleSuccessResponse}
     */
    this.subjectsDelete = function(iDRequest, callback) {
      var postBody = iDRequest;

      // verify the required parameter 'iDRequest' is set
      if (iDRequest === undefined || iDRequest === null) {
        throw new Error("Missing the required parameter 'iDRequest' when calling subjectsDelete");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = SimpleSuccessResponse;

      return this.apiClient.callApi(
        '/subjects', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the subjectsGet operation.
     * @callback module:api/SubjectsApi~subjectsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubjectListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a paginated list of all subjects.
     * Note : only users with the role `administrator` should be able to access this route. 10 subjects should be returned per page. At least three characters should be provided for the search, or the results won't be filtered.
     * @param {Object} opts Optional parameters
     * @param {String} opts.query 
     * @param {Number} opts.page 
     * @param {module:api/SubjectsApi~subjectsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubjectListResponse}
     */
    this.subjectsGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'query': opts['query'],
        'page': opts['page'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = SubjectListResponse;

      return this.apiClient.callApi(
        '/subjects', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the subjectsIdGet operation.
     * @callback module:api/SubjectsApi~subjectsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubjectResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information on a subject
     * Note : only users with the role `administrator` should be able to access this route.
     * @param {Number} id Subject ID
     * @param {module:api/SubjectsApi~subjectsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubjectResponse}
     */
    this.subjectsIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subjectsIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = SubjectResponse;

      return this.apiClient.callApi(
        '/subjects/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the subjectsIdGroupsDelete operation.
     * @callback module:api/SubjectsApi~subjectsIdGroupsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a group from a subject.
     * Note : only users with the role `administrator` should be able to access this route. This should trigger the re-organisation of groups. This request should be denied if there is less than one group in the subject.
     * @param {Number} id Subject ID
     * @param {module:api/SubjectsApi~subjectsIdGroupsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleSuccessResponse}
     */
    this.subjectsIdGroupsDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subjectsIdGroupsDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = SimpleSuccessResponse;

      return this.apiClient.callApi(
        '/subjects/{id}/groups', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the subjectsIdGroupsPost operation.
     * @callback module:api/SubjectsApi~subjectsIdGroupsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a new group to a subject.
     * Note : only users with the role `administrator` should be able to access this route. This should trigger the re-organization of groups.
     * @param {Number} id Subject ID
     * @param {module:api/SubjectsApi~subjectsIdGroupsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleSuccessResponse}
     */
    this.subjectsIdGroupsPost = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subjectsIdGroupsPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = SimpleSuccessResponse;

      return this.apiClient.callApi(
        '/subjects/{id}/groups', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the subjectsIdOccupanciesGet operation.
     * @callback module:api/SubjectsApi~subjectsIdOccupanciesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Occupancies} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the occupancies of a subject for the given time period.
     * Note : only users with the role `administrator`, or professors who are a teacher of the subject should be able to access this route.
     * @param {Number} id Subject ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start Start timestamp of the occupancies
     * @param {Number} opts.end End timestamp of the occupancies
     * @param {Number} opts.occupanciesPerDay Pass 0 to return ALL the events.
     * @param {module:api/SubjectsApi~subjectsIdOccupanciesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Occupancies}
     */
    this.subjectsIdOccupanciesGet = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subjectsIdOccupanciesGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'start': opts['start'],
        'end': opts['end'],
        'occupancies_per_day': opts['occupanciesPerDay'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Occupancies;

      return this.apiClient.callApi(
        '/subjects/{id}/occupancies', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the subjectsIdPut operation.
     * @callback module:api/SubjectsApi~subjectsIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates information for a subject.
     * Note : only users with the role `administrator` should be able to access this route. The teacher designed by teacher_in_charge_id should already be a teacher of that subject.
     * @param {Number} id Subject ID
     * @param {module:model/SubjectUpdateRequest} subjectUpdateRequest 
     * @param {module:api/SubjectsApi~subjectsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleSuccessResponse}
     */
    this.subjectsIdPut = function(id, subjectUpdateRequest, callback) {
      var postBody = subjectUpdateRequest;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subjectsIdPut");
      }

      // verify the required parameter 'subjectUpdateRequest' is set
      if (subjectUpdateRequest === undefined || subjectUpdateRequest === null) {
        throw new Error("Missing the required parameter 'subjectUpdateRequest' when calling subjectsIdPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = SimpleSuccessResponse;

      return this.apiClient.callApi(
        '/subjects/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the subjectsIdTeachersDelete operation.
     * @callback module:api/SubjectsApi~subjectsIdTeachersDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes teachers from a subject using their IDs.
     * Note : only users with the role `administrator` should be able to access this route. This request should be denied if there is less than one teacher in the subject, or if the teacher is in charge.
     * @param {Number} id Subject ID
     * @param {module:model/IDRequest} iDRequest 
     * @param {module:api/SubjectsApi~subjectsIdTeachersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleSuccessResponse}
     */
    this.subjectsIdTeachersDelete = function(id, iDRequest, callback) {
      var postBody = iDRequest;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subjectsIdTeachersDelete");
      }

      // verify the required parameter 'iDRequest' is set
      if (iDRequest === undefined || iDRequest === null) {
        throw new Error("Missing the required parameter 'iDRequest' when calling subjectsIdTeachersDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = SimpleSuccessResponse;

      return this.apiClient.callApi(
        '/subjects/{id}/teachers', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the subjectsIdTeachersPost operation.
     * @callback module:api/SubjectsApi~subjectsIdTeachersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds new teachers to a subject using their IDs.
     * Note : only users with the role `administrator` should be able to access this route.
     * @param {Number} id Subject ID
     * @param {module:model/IDRequest} iDRequest 
     * @param {module:api/SubjectsApi~subjectsIdTeachersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleSuccessResponse}
     */
    this.subjectsIdTeachersPost = function(id, iDRequest, callback) {
      var postBody = iDRequest;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subjectsIdTeachersPost");
      }

      // verify the required parameter 'iDRequest' is set
      if (iDRequest === undefined || iDRequest === null) {
        throw new Error("Missing the required parameter 'iDRequest' when calling subjectsIdTeachersPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = SimpleSuccessResponse;

      return this.apiClient.callApi(
        '/subjects/{id}/teachers', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the subjectsPost operation.
     * @callback module:api/SubjectsApi~subjectsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new subject.
     * Note : only users with the role `administrator` should be able to access this route.
     * @param {module:model/Subject} subjectCreationRequest 
     * @param {module:api/SubjectsApi~subjectsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleSuccessResponse}
     */
    this.subjectsPost = function(subjectCreationRequest, callback) {
      var postBody = subjectCreationRequest;

      // verify the required parameter 'subjectCreationRequest' is set
      if (subjectCreationRequest === undefined || subjectCreationRequest === null) {
        throw new Error("Missing the required parameter 'subjectCreationRequest' when calling subjectsPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = SimpleSuccessResponse;

      return this.apiClient.callApi(
        '/subjects', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
