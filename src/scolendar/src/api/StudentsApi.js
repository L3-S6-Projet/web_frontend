/*
 * Scolendar
 * UE Projet - L3 Informatique AMU 2019-2020 All of the routes missing the `role-professor` or `role-student` tags are meant for administrators only - as stated in their descriptions.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AccountCreatedResponse', 'model/ErrorResponse', 'model/IDRequest', 'model/Occupancies', 'model/SimpleSuccessResponse', 'model/StudentCreationRequest', 'model/StudentListResponse', 'model/StudentResponse', 'model/StudentSubjects', 'model/StudentUpdateRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AccountCreatedResponse'), require('../model/ErrorResponse'), require('../model/IDRequest'), require('../model/Occupancies'), require('../model/SimpleSuccessResponse'), require('../model/StudentCreationRequest'), require('../model/StudentListResponse'), require('../model/StudentResponse'), require('../model/StudentSubjects'), require('../model/StudentUpdateRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.Scolendar) {
      root.Scolendar = {};
    }
    root.Scolendar.StudentsApi = factory(root.Scolendar.ApiClient, root.Scolendar.AccountCreatedResponse, root.Scolendar.ErrorResponse, root.Scolendar.IDRequest, root.Scolendar.Occupancies, root.Scolendar.SimpleSuccessResponse, root.Scolendar.StudentCreationRequest, root.Scolendar.StudentListResponse, root.Scolendar.StudentResponse, root.Scolendar.StudentSubjects, root.Scolendar.StudentUpdateRequest);
  }
}(this, function(ApiClient, AccountCreatedResponse, ErrorResponse, IDRequest, Occupancies, SimpleSuccessResponse, StudentCreationRequest, StudentListResponse, StudentResponse, StudentSubjects, StudentUpdateRequest) {
  'use strict';

  /**
   * Students service.
   * @module api/StudentsApi
   * @version v1
   */

  /**
   * Constructs a new StudentsApi. 
   * @alias module:api/StudentsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the studentsDelete operation.
     * @callback module:api/StudentsApi~studentsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the given students using their IDs.
     * Note : only users with the role `administrator` should be able to access this route. This request should trigger the re-organization of students in the affected groups.
     * @param {module:model/IDRequest} iDRequest 
     * @param {module:api/StudentsApi~studentsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleSuccessResponse}
     */
    this.studentsDelete = function(iDRequest, callback) {
      var postBody = iDRequest;

      // verify the required parameter 'iDRequest' is set
      if (iDRequest === undefined || iDRequest === null) {
        throw new Error("Missing the required parameter 'iDRequest' when calling studentsDelete");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = SimpleSuccessResponse;

      return this.apiClient.callApi(
        '/students', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the studentsGet operation.
     * @callback module:api/StudentsApi~studentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StudentListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a paginated list of all students.
     * Note : only users with the role `administrator` should be able to access this route. 10 students should be returned per page. At least three characters should be provided for the search, or the results won't be filtered.
     * @param {Object} opts Optional parameters
     * @param {String} opts.query 
     * @param {Number} opts.page 
     * @param {module:api/StudentsApi~studentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StudentListResponse}
     */
    this.studentsGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'query': opts['query'],
        'page': opts['page'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = StudentListResponse;

      return this.apiClient.callApi(
        '/students', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the studentsIdGet operation.
     * @callback module:api/StudentsApi~studentsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StudentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information for a student
     * Note : only users with the role `administrator` should be able to access this route.
     * @param {Number} id Student ID
     * @param {module:api/StudentsApi~studentsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StudentResponse}
     */
    this.studentsIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling studentsIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = StudentResponse;

      return this.apiClient.callApi(
        '/students/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the studentsIdOccupanciesGet operation.
     * @callback module:api/StudentsApi~studentsIdOccupanciesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Occupancies} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the occupancies of a student for the given time period.
     * Note : only users with the role `administrator`, or students whose id match the one in the URL should be able to access this route.
     * @param {Number} id Student ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start Start timestamp of the occupancies
     * @param {Number} opts.end End timestamp of the occupancies
     * @param {Number} opts.occupanciesPerDay Pass 0 to return ALL the events.
     * @param {module:api/StudentsApi~studentsIdOccupanciesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Occupancies}
     */
    this.studentsIdOccupanciesGet = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling studentsIdOccupanciesGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'start': opts['start'],
        'end': opts['end'],
        'occupancies_per_day': opts['occupanciesPerDay'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Occupancies;

      return this.apiClient.callApi(
        '/students/{id}/occupancies', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the studentsIdPut operation.
     * @callback module:api/StudentsApi~studentsIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates information for a student.
     * Note : only users with the role `administrator` should be able to access this route. Only filled fields should be updated. This should trigger the re-organization of groups.
     * @param {Number} id Student ID
     * @param {module:model/StudentUpdateRequest} studentUpdateRequest 
     * @param {module:api/StudentsApi~studentsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleSuccessResponse}
     */
    this.studentsIdPut = function(id, studentUpdateRequest, callback) {
      var postBody = studentUpdateRequest;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling studentsIdPut");
      }

      // verify the required parameter 'studentUpdateRequest' is set
      if (studentUpdateRequest === undefined || studentUpdateRequest === null) {
        throw new Error("Missing the required parameter 'studentUpdateRequest' when calling studentsIdPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = SimpleSuccessResponse;

      return this.apiClient.callApi(
        '/students/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the studentsIdSubjectsGet operation.
     * @callback module:api/StudentsApi~studentsIdSubjectsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StudentSubjects} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of all subjects that a student participates in.
     * Note : only students whose id match the one in the URL should be able to access this route.
     * @param {Number} id Student ID
     * @param {module:api/StudentsApi~studentsIdSubjectsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StudentSubjects}
     */
    this.studentsIdSubjectsGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling studentsIdSubjectsGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = StudentSubjects;

      return this.apiClient.callApi(
        '/students/{id}/subjects', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the studentsPost operation.
     * @callback module:api/StudentsApi~studentsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountCreatedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new student.
     * Note : only users with the role `administrator` should be able to access this route. This should trigger the re-organization of groups.
     * @param {module:model/StudentCreationRequest} studentCreationRequest 
     * @param {module:api/StudentsApi~studentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountCreatedResponse}
     */
    this.studentsPost = function(studentCreationRequest, callback) {
      var postBody = studentCreationRequest;

      // verify the required parameter 'studentCreationRequest' is set
      if (studentCreationRequest === undefined || studentCreationRequest === null) {
        throw new Error("Missing the required parameter 'studentCreationRequest' when calling studentsPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = AccountCreatedResponse;

      return this.apiClient.callApi(
        '/students', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
