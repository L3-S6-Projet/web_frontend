/*
 * Scolendar
 * UE Projet - L3 Informatique AMU 2019-2020 All of the routes missing the `role-professor` or `role-student` tags are meant for administrators only - as stated in their descriptions.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Scolendar);
  }
}(this, function(expect, Scolendar) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Scolendar.ClassesApi();
  });

  describe('(package)', function() {
    describe('ClassesApi', function() {
      describe('classesDelete', function() {
        it('should call classesDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for classesDelete call and complete the assertions
          /*
          var iDRequest = new Scolendar.IDRequest();

          instance.classesDelete(iDRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Scolendar.SimpleSuccessResponse);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("success");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('classesGet', function() {
        it('should call classesGet successfully', function(done) {
          // TODO: uncomment, update parameter values for classesGet call and complete the assertions
          /*
          var opts = {};
          opts.query = "query_example";
          opts.page = 56;

          instance.classesGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Scolendar.ClassesList);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("success");
            expect(data.total).to.be.a('number');
            expect(data.total).to.be(0);
            {
              let dataCtr = data.classes;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Scolendar.ClassWithId);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("L3 Informatique");
                expect(data.level).to.be.a(Scolendar.Level);
        

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('classesIdGet', function() {
        it('should call classesIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for classesIdGet call and complete the assertions
          /*
          var id = 56;

          instance.classesIdGet(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Scolendar.ClassResponse);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("success");
            expect(data._class).to.be.a(Scolendar.ModelClass);
                  expect(data._class.name).to.be.a('string');
              expect(data._class.name).to.be("L3 Informatique");
              expect(data._class.level).to.be.a(Scolendar.Level);
      
            expect(data.totalService).to.be.a('number');
            expect(data.totalService).to.be(56);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('classesIdOccupanciesGet', function() {
        it('should call classesIdOccupanciesGet successfully', function(done) {
          // TODO: uncomment, update parameter values for classesIdOccupanciesGet call and complete the assertions
          /*
          var id = 56;
          var opts = {};
          opts.start = 56;
          opts.end = 56;
          opts.occupanciesPerDay = 56;

          instance.classesIdOccupanciesGet(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Scolendar.Occupancies);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("success");
            {
              let dataCtr = data.days;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Scolendar.OccupanciesDays);
                expect(data._date).to.be.a('string');
                expect(data._date).to.be("01-05-2020");
                {
                  let dataCtr = data.occupancies;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Scolendar.OccupanciesOccupancies);
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be(0);
                    expect(data.classroomName).to.be.a('string');
                    expect(data.classroomName).to.be("B.001");
                    expect(data.groupName).to.be.a('string');
                    expect(data.groupName).to.be("Groupe 1");
                    expect(data.subjectName).to.be.a('string');
                    expect(data.subjectName).to.be("Algorithmique");
                    expect(data.teacherName).to.be.a('string');
                    expect(data.teacherName).to.be("mylan chevalier");
                    expect(data.start).to.be.a('number');
                    expect(data.start).to.be(1587776227);
                    expect(data.end).to.be.a('number');
                    expect(data.end).to.be(1587779827);
                    expect(data.occupancyType).to.be.a(Scolendar.OccupancyType);
                        expect(data.className).to.be.a('string');
                    expect(data.className).to.be("L3 Informatique");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("Algorithmique CM Groupe 1");
    
                          }
                }

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('classesIdPut', function() {
        it('should call classesIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for classesIdPut call and complete the assertions
          /*
          var id = 56;
          var classUpdateRequest = new Scolendar.ClassUpdateRequest();
          classUpdateRequest.name = "L3 Informatique";
          classUpdateRequest.level = new Scolendar.Level();

          instance.classesIdPut(id, classUpdateRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Scolendar.SimpleSuccessResponse);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("success");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('classesPost', function() {
        it('should call classesPost successfully', function(done) {
          // TODO: uncomment, update parameter values for classesPost call and complete the assertions
          /*
          var classCreationRequest = new Scolendar.ModelClass();
          classCreationRequest.name = "L3 Informatique";
          classCreationRequest.level = new Scolendar.Level();

          instance.classesPost(classCreationRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Scolendar.SimpleSuccessResponse);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("success");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
