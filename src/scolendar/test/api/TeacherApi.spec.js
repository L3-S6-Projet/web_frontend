/*
 * Scolendar
 * UE Projet - L3 Informatique AMU 2019-2020 All of the routes missing the `role-professor` or `role-student` tags are meant for administrators only - as stated in their descriptions.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Scolendar);
  }
}(this, function(expect, Scolendar) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Scolendar.TeacherApi();
  });

  describe('(package)', function() {
    describe('TeacherApi', function() {
      describe('teachersDelete', function() {
        it('should call teachersDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for teachersDelete call and complete the assertions
          /*
          var iDRequest = new Scolendar.IDRequest();

          instance.teachersDelete(iDRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Scolendar.SimpleSuccessResponse);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("success");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('teachersGet', function() {
        it('should call teachersGet successfully', function(done) {
          // TODO: uncomment, update parameter values for teachersGet call and complete the assertions
          /*
          var opts = {};
          opts.query = "query_example";
          opts.page = 56;

          instance.teachersGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Scolendar.TeacherListResponse);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("success");
            expect(data.total).to.be.a('number');
            expect(data.total).to.be(100);
            {
              let dataCtr = data.teachers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Scolendar.TeacherListResponseTeachers);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.firstName).to.be.a('string');
                expect(data.firstName).to.be("mylan");
                expect(data.lastName).to.be.a('string');
                expect(data.lastName).to.be("chevalier");
                expect(data.email).to.be.a('string');
                expect(data.email).to.be("nathan.roberts@example.com");
                expect(data.phoneNumber).to.be.a('string');
                expect(data.phoneNumber).to.be("06 71 55 50 11");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('teachersIdGet', function() {
        it('should call teachersIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for teachersIdGet call and complete the assertions
          /*
          var id = 56;

          instance.teachersIdGet(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Scolendar.TeacherResponse);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("success");
            expect(data.teacher).to.be.a(Scolendar.TeacherResponseTeacher);
                  expect(data.teacher.firstName).to.be.a('string');
              expect(data.teacher.firstName).to.be("Mylan");
              expect(data.teacher.lastName).to.be.a('string');
              expect(data.teacher.lastName).to.be("Chevalier");
              expect(data.teacher.username).to.be.a('string');
              expect(data.teacher.username).to.be("road.buddy");
              expect(data.teacher.email).to.be.a('string');
              expect(data.teacher.email).to.be("road.buddy@etu.univ-ac.edu");
              expect(data.teacher.phoneNumber).to.be.a('string');
              expect(data.teacher.phoneNumber).to.be("06 71 55 50 11");
              expect(data.teacher.rank).to.be.a(Scolendar.Rank);
                  expect(data.teacher.totalService).to.be.a('number');
              expect(data.teacher.totalService).to.be(58);
              {
                let dataCtr = data.teacher.services;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Scolendar.TeacherResponseTeacherServices);
                  expect(data._class).to.be.a('string');
                  expect(data._class).to.be("L1 Informatique");
                  expect(data.cm).to.be.a('number');
                  expect(data.cm).to.be(12);
                  expect(data.project).to.be.a('number');
                  expect(data.project).to.be(0);
                  expect(data.td).to.be.a('number');
                  expect(data.td).to.be(6);
                  expect(data.tp).to.be.a('number');
                  expect(data.tp).to.be(6);
                  expect(data.administration).to.be.a('number');
                  expect(data.administration).to.be(5);
                  expect(data.external).to.be.a('number');
                  expect(data.external).to.be(0);
  
                        }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('teachersIdOccupanciesGet', function() {
        it('should call teachersIdOccupanciesGet successfully', function(done) {
          // TODO: uncomment, update parameter values for teachersIdOccupanciesGet call and complete the assertions
          /*
          var id = 56;
          var opts = {};
          opts.start = 56;
          opts.end = 56;
          opts.occupanciesPerDay = 56;

          instance.teachersIdOccupanciesGet(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Scolendar.Occupancies);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("success");
            {
              let dataCtr = data.days;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Scolendar.OccupanciesDays);
                expect(data._date).to.be.a('string');
                expect(data._date).to.be("01-05-2020");
                {
                  let dataCtr = data.occupancies;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Scolendar.OccupanciesOccupancies);
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be(0);
                    expect(data.classroomName).to.be.a('string');
                    expect(data.classroomName).to.be("B.001");
                    expect(data.groupName).to.be.a('string');
                    expect(data.groupName).to.be("Groupe 1");
                    expect(data.subjectName).to.be.a('string');
                    expect(data.subjectName).to.be("Algorithmique");
                    expect(data.teacherName).to.be.a('string');
                    expect(data.teacherName).to.be("mylan chevalier");
                    expect(data.start).to.be.a('number');
                    expect(data.start).to.be(1587776227);
                    expect(data.end).to.be.a('number');
                    expect(data.end).to.be(1587779827);
                    expect(data.occupancyType).to.be.a(Scolendar.OccupancyType);
                        expect(data.className).to.be.a('string');
                    expect(data.className).to.be("L3 Informatique");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("Algorithmique CM Groupe 1");
    
                          }
                }

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('teachersIdPut', function() {
        it('should call teachersIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for teachersIdPut call and complete the assertions
          /*
          var id = 56;
          var teacherUpdateRequest = new Scolendar.TeacherUpdateRequest();
          teacherUpdateRequest.firstName = "mylan";
          teacherUpdateRequest.lastName = "chevalier";
          teacherUpdateRequest.email = "road.buddy@etu.univ-ac.edu";
          teacherUpdateRequest.phoneNumber = "06 71 55 50 11";
          teacherUpdateRequest.rank = new Scolendar.Rank();
          teacherUpdateRequest.password = "newpassword";

          instance.teachersIdPut(id, teacherUpdateRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Scolendar.SimpleSuccessResponse);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("success");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('teachersIdSubjectsGet', function() {
        it('should call teachersIdSubjectsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for teachersIdSubjectsGet call and complete the assertions
          /*
          var id = 56;

          instance.teachersIdSubjectsGet(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Scolendar.TeacherSubjects);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("success");
            {
              let dataCtr = data.subjects;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Scolendar.TeacherSubjectsSubjects);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("PPPE");
                expect(data.className).to.be.a('string');
                expect(data.className).to.be("L3 Informatique");
                {
                  let dataCtr = data.teachers;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Scolendar.TeacherSubjectsTeachers);
                    expect(data.firstName).to.be.a('string');
                    expect(data.firstName).to.be("Butch");
                    expect(data.lastName).to.be.a('string');
                    expect(data.lastName).to.be("Cranky");
                    expect(data.inCharge).to.be.a('boolean');
                    expect(data.inCharge).to.be(true);
                    expect(data.email).to.be.a('string');
                    expect(data.email).to.be("butch.cranky@nook.mail");
                    expect(data.phoneNumber).to.be.a('string');
                    expect(data.phoneNumber).to.be("06 71 55 50 11");
    
                          }
                }
                {
                  let dataCtr = data.groups;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Scolendar.TeacherSubjectsGroups);
                    expect(data._number).to.be.a('number');
                    expect(data._number).to.be(0);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("Groupe 1");
                    expect(data.count).to.be.a('number');
                    expect(data.count).to.be(22);
    
                          }
                }

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('teachersPost', function() {
        it('should call teachersPost successfully', function(done) {
          // TODO: uncomment, update parameter values for teachersPost call and complete the assertions
          /*
          var teacherCreationRequest = new Scolendar.TeacherCreationRequest();
          teacherCreationRequest.firstName = "mylan";
          teacherCreationRequest.lastName = "chevalier";
          teacherCreationRequest.email = "nathan.roberts@example.com";
          teacherCreationRequest.phoneNumber = "06 71 55 50 11";
          teacherCreationRequest.rank = new Scolendar.Rank();

          instance.teachersPost(teacherCreationRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Scolendar.AccountCreatedResponse);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("success");
            expect(data.username).to.be.a('string');
            expect(data.username).to.be("azure_diamong");
            expect(data.password).to.be.a('string');
            expect(data.password).to.be("n5l*2#01@");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
