/*
 * Scolendar
 * UE Projet - L3 Informatique AMU 2019-2020 All of the routes missing the `role-professor` or `role-student` tags are meant for administrators only - as stated in their descriptions.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Scolendar);
  }
}(this, function(expect, Scolendar) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Scolendar.ClassroomApi();
  });

  describe('(package)', function() {
    describe('ClassroomApi', function() {
      describe('classroomsDelete', function() {
        it('should call classroomsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for classroomsDelete call and complete the assertions
          /*
          var iDRequest = new Scolendar.IDRequest();

          instance.classroomsDelete(iDRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Scolendar.SimpleSuccessResponse);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("success");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('classroomsGet', function() {
        it('should call classroomsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for classroomsGet call and complete the assertions
          /*
          var opts = {};
          opts.query = "query_example";
          opts.page = 56;

          instance.classroomsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Scolendar.ClassroomsList);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("success");
            expect(data.total).to.be.a('number');
            expect(data.total).to.be(100);
            {
              let dataCtr = data.classrooms;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Scolendar.Classroom);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("B.001");
                expect(data.capacity).to.be.a('number');
                expect(data.capacity).to.be(50);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('classroomsIdGet', function() {
        it('should call classroomsIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for classroomsIdGet call and complete the assertions
          /*
          var id = 56;

          instance.classroomsIdGet(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Scolendar.ClassroomGetResponse);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("success");
            expect(data.classroom).to.be.a(Scolendar.Classroom);
                  expect(data.classroom.id).to.be.a('number');
              expect(data.classroom.id).to.be(0);
              expect(data.classroom.name).to.be.a('string');
              expect(data.classroom.name).to.be("B.001");
              expect(data.classroom.capacity).to.be.a('number');
              expect(data.classroom.capacity).to.be(50);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('classroomsIdOccupanciesGet', function() {
        it('should call classroomsIdOccupanciesGet successfully', function(done) {
          // TODO: uncomment, update parameter values for classroomsIdOccupanciesGet call and complete the assertions
          /*
          var id = 56;
          var opts = {};
          opts.start = 56;
          opts.end = 56;
          opts.occupanciesPerDay = 56;

          instance.classroomsIdOccupanciesGet(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Scolendar.Occupancies);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("success");
            {
              let dataCtr = data.days;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Scolendar.OccupanciesDays);
                expect(data._date).to.be.a('string');
                expect(data._date).to.be("01-05-2020");
                {
                  let dataCtr = data.occupancies;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Scolendar.OccupanciesOccupancies);
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be(0);
                    expect(data.classroomName).to.be.a('string');
                    expect(data.classroomName).to.be("B.001");
                    expect(data.groupName).to.be.a('string');
                    expect(data.groupName).to.be("Groupe 1");
                    expect(data.subjectName).to.be.a('string');
                    expect(data.subjectName).to.be("Algorithmique");
                    expect(data.teacherName).to.be.a('string');
                    expect(data.teacherName).to.be("mylan chevalier");
                    expect(data.start).to.be.a('number');
                    expect(data.start).to.be(1587776227);
                    expect(data.end).to.be.a('number');
                    expect(data.end).to.be(1587779827);
                    expect(data.occupancyType).to.be.a(Scolendar.OccupancyType);
                        expect(data.className).to.be.a('string');
                    expect(data.className).to.be("L3 Informatique");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("Algorithmique CM Groupe 1");
    
                          }
                }

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('classroomsIdPut', function() {
        it('should call classroomsIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for classroomsIdPut call and complete the assertions
          /*
          var id = 56;
          var classroomUpdateRequest = new Scolendar.ClassroomUpdateRequest();
          classroomUpdateRequest.name = "B.001";

          instance.classroomsIdPut(id, classroomUpdateRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Scolendar.SimpleSuccessResponse);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("success");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('classroomsPost', function() {
        it('should call classroomsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for classroomsPost call and complete the assertions
          /*
          var classroomCreationRequest = new Scolendar.ClassroomCreationRequest();
          classroomCreationRequest.name = "B.001";
          classroomCreationRequest.capacity = 50;

          instance.classroomsPost(classroomCreationRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Scolendar.SimpleSuccessResponse);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("success");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
