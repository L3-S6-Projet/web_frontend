/*
 * Scolendar
 * UE Projet - L3 Informatique AMU 2019-2020 All of the routes missing the `role-professor` or `role-student` tags are meant for administrators only - as stated in their descriptions.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Scolendar);
  }
}(this, function(expect, Scolendar) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Scolendar.SubjectsApi();
  });

  describe('(package)', function() {
    describe('SubjectsApi', function() {
      describe('subjectsDelete', function() {
        it('should call subjectsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for subjectsDelete call and complete the assertions
          /*
          var iDRequest = new Scolendar.IDRequest();

          instance.subjectsDelete(iDRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Scolendar.SimpleSuccessResponse);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("success");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('subjectsGet', function() {
        it('should call subjectsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for subjectsGet call and complete the assertions
          /*
          var opts = {};
          opts.query = "query_example";
          opts.page = 56;

          instance.subjectsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Scolendar.SubjectListResponse);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("success");
            expect(data.total).to.be.a('number');
            expect(data.total).to.be(100);
            {
              let dataCtr = data.subjects;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Scolendar.SubjectListResponseSubjects);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.className).to.be.a('string');
                expect(data.className).to.be("L3 Informatique");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("PPPE");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('subjectsIdGet', function() {
        it('should call subjectsIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for subjectsIdGet call and complete the assertions
          /*
          var id = 56;

          instance.subjectsIdGet(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Scolendar.SubjectResponse);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("success");
            expect(data.subject).to.be.a(Scolendar.SubjectResponseSubject);
                  expect(data.subject.name).to.be.a('string');
              expect(data.subject.name).to.be("PPPE");
              expect(data.subject.className).to.be.a('string');
              expect(data.subject.className).to.be("L3 Informatique");
              expect(data.subject.totalHours).to.be.a('number');
              expect(data.subject.totalHours).to.be(50);
              {
                let dataCtr = data.subject.teachers;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Scolendar.SubjectResponseSubjectTeachers);
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be(0);
                  expect(data.firstName).to.be.a('string');
                  expect(data.firstName).to.be("Mylan");
                  expect(data.lastName).to.be.a('string');
                  expect(data.lastName).to.be("Chevalier");
                  expect(data.inCharge).to.be.a('boolean');
                  expect(data.inCharge).to.be(true);
  
                        }
              }
              {
                let dataCtr = data.subject.groups;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Scolendar.SubjectResponseSubjectGroups);
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be(0);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("Groupe 1");
                  expect(data.count).to.be.a('number');
                  expect(data.count).to.be(22);
  
                        }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('subjectsIdGroupsDelete', function() {
        it('should call subjectsIdGroupsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for subjectsIdGroupsDelete call and complete the assertions
          /*
          var id = 56;

          instance.subjectsIdGroupsDelete(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Scolendar.SimpleSuccessResponse);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("success");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('subjectsIdGroupsPost', function() {
        it('should call subjectsIdGroupsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for subjectsIdGroupsPost call and complete the assertions
          /*
          var id = 56;

          instance.subjectsIdGroupsPost(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Scolendar.SimpleSuccessResponse);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("success");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('subjectsIdOccupanciesGet', function() {
        it('should call subjectsIdOccupanciesGet successfully', function(done) {
          // TODO: uncomment, update parameter values for subjectsIdOccupanciesGet call and complete the assertions
          /*
          var id = 56;
          var opts = {};
          opts.start = 56;
          opts.end = 56;
          opts.occupanciesPerDay = 56;

          instance.subjectsIdOccupanciesGet(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Scolendar.Occupancies);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("success");
            {
              let dataCtr = data.days;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Scolendar.OccupanciesDays);
                expect(data._date).to.be.a('string');
                expect(data._date).to.be("01-05-2020");
                {
                  let dataCtr = data.occupancies;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Scolendar.OccupanciesOccupancies);
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be(0);
                    expect(data.classroomName).to.be.a('string');
                    expect(data.classroomName).to.be("B.001");
                    expect(data.groupName).to.be.a('string');
                    expect(data.groupName).to.be("Groupe 1");
                    expect(data.subjectName).to.be.a('string');
                    expect(data.subjectName).to.be("Algorithmique");
                    expect(data.teacherName).to.be.a('string');
                    expect(data.teacherName).to.be("mylan chevalier");
                    expect(data.start).to.be.a('number');
                    expect(data.start).to.be(1587776227);
                    expect(data.end).to.be.a('number');
                    expect(data.end).to.be(1587779827);
                    expect(data.occupancyType).to.be.a(Scolendar.OccupancyType);
                        expect(data.className).to.be.a('string');
                    expect(data.className).to.be("L3 Informatique");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("Algorithmique CM Groupe 1");
    
                          }
                }

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('subjectsIdPut', function() {
        it('should call subjectsIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for subjectsIdPut call and complete the assertions
          /*
          var id = 56;
          var subjectUpdateRequest = new Scolendar.SubjectUpdateRequest();
          subjectUpdateRequest.name = "PPPE";
          subjectUpdateRequest.teacherInChargeId = 0;

          instance.subjectsIdPut(id, subjectUpdateRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Scolendar.SimpleSuccessResponse);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("success");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('subjectsIdTeachersDelete', function() {
        it('should call subjectsIdTeachersDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for subjectsIdTeachersDelete call and complete the assertions
          /*
          var id = 56;
          var iDRequest = new Scolendar.IDRequest();

          instance.subjectsIdTeachersDelete(id, iDRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Scolendar.SimpleSuccessResponse);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("success");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('subjectsIdTeachersPost', function() {
        it('should call subjectsIdTeachersPost successfully', function(done) {
          // TODO: uncomment, update parameter values for subjectsIdTeachersPost call and complete the assertions
          /*
          var id = 56;
          var iDRequest = new Scolendar.IDRequest();

          instance.subjectsIdTeachersPost(id, iDRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Scolendar.SimpleSuccessResponse);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("success");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('subjectsPost', function() {
        it('should call subjectsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for subjectsPost call and complete the assertions
          /*
          var subjectCreationRequest = new Scolendar.Subject();
          subjectCreationRequest.name = "PPPE";
          subjectCreationRequest.classId = 0;
          subjectCreationRequest.teacherInChargeId = 0;

          instance.subjectsPost(subjectCreationRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Scolendar.SimpleSuccessResponse);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("success");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
