/*
 * Scolendar
 * UE Projet - L3 Informatique AMU 2019-2020 All of the routes missing the `role-professor` or `role-student` tags are meant for administrators only - as stated in their descriptions.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Scolendar);
  }
}(this, function(expect, Scolendar) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Scolendar.AuthApi();
  });

  describe('(package)', function() {
    describe('AuthApi', function() {
      describe('login', function() {
        it('should call login successfully', function(done) {
          // TODO: uncomment, update parameter values for login call and complete the assertions
          /*
          var loginRequest = new Scolendar.LoginRequest();
          loginRequest.username = "azure_diamond";
          loginRequest.password = "hunter2";

          instance.login(loginRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Scolendar.SuccessfulLoginResponse);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("success");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("....");
            expect(data.user).to.be.a(Scolendar.SuccessfulLoginResponseUser);
                  expect(data.user.id).to.be.a('number');
              expect(data.user.id).to.be(0);
              expect(data.user.firstName).to.be.a('string');
              expect(data.user.firstName).to.be("");
              expect(data.user.lastName).to.be.a('string');
              expect(data.user.lastName).to.be("");
              expect(data.user.kind).to.be.a(Scolendar.Role);
      

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('logout', function() {
        it('should call logout successfully', function(done) {
          // TODO: uncomment logout call and complete the assertions
          /*

          instance.logout(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Scolendar.SimpleSuccessResponse);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("success");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
