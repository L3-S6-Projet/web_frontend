/*
 * Scolendar
 * UE Projet - L3 Informatique AMU 2019-2020 All of the routes missing the `role-professor` or `role-student` tags are meant for administrators only - as stated in their descriptions.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Scolendar);
  }
}(this, function(expect, Scolendar) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ProfileRecentModificationsOccupancy', function() {
      beforeEach(function() {
        instance = new Scolendar.ProfileRecentModificationsOccupancy();
      });

      it('should create an instance of ProfileRecentModificationsOccupancy', function() {
        // TODO: update the code to test ProfileRecentModificationsOccupancy
        expect(instance).to.be.a(Scolendar.ProfileRecentModificationsOccupancy);
      });

      it('should have the property subjectName (base name: "subject_name")', function() {
        // TODO: update the code to test the property subjectName
        expect(instance).to.have.property('subjectName');
        // expect(instance.subjectName).to.be(expectedValueLiteral);
      });

      it('should have the property className (base name: "class_name")', function() {
        // TODO: update the code to test the property className
        expect(instance).to.have.property('className');
        // expect(instance.className).to.be(expectedValueLiteral);
      });

      it('should have the property occupancyType (base name: "occupancy_type")', function() {
        // TODO: update the code to test the property occupancyType
        expect(instance).to.have.property('occupancyType');
        // expect(instance.occupancyType).to.be(expectedValueLiteral);
      });

      it('should have the property occupancyStart (base name: "occupancy_start")', function() {
        // TODO: update the code to test the property occupancyStart
        expect(instance).to.have.property('occupancyStart');
        // expect(instance.occupancyStart).to.be(expectedValueLiteral);
      });

      it('should have the property occupancyEnd (base name: "occupancy_end")', function() {
        // TODO: update the code to test the property occupancyEnd
        expect(instance).to.have.property('occupancyEnd');
        // expect(instance.occupancyEnd).to.be(expectedValueLiteral);
      });

      it('should have the property previousOccupancyStart (base name: "previous_occupancy_start")', function() {
        // TODO: update the code to test the property previousOccupancyStart
        expect(instance).to.have.property('previousOccupancyStart');
        // expect(instance.previousOccupancyStart).to.be(expectedValueLiteral);
      });

      it('should have the property previousOccupancyEnd (base name: "previous_occupancy_end")', function() {
        // TODO: update the code to test the property previousOccupancyEnd
        expect(instance).to.have.property('previousOccupancyEnd');
        // expect(instance.previousOccupancyEnd).to.be(expectedValueLiteral);
      });

    });
  });

}));
